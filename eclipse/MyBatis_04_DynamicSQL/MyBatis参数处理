单个参数：mybatis不会做特殊处理
	#{参数名}：取出参数值
	
多个参数：mybatis会做特殊处理
		多个参数会被封装成一个map
			key：param1...paramN，或者参数的索引也可以
			value：传入的参数值
		#{就是从map中获取指定的key的值}
		
命名参数：明确指定封装参数的map的key：@Param("id")
		多个参数会被封装成一个map
		key：使用@Param注解指定的值
		value：参数值
		#{指定的key}取出对应的参数值
	
POJO	
如果多个参数正好是我们业务逻辑的数据模型，我们可以直接传入pojo
	#{属性名}：取出传入的pojo的属性值

Map
如果多个参数不时业务模型中的数据，没有对应的pojo，不经常使用，为了方便，我们也可以传入map
	#{key}:取出map中对应的值
	
TO
如果多个参数不是业务模型中的数据，但是经常要使用，推荐来编写一个TO（Transfer Object）数据传输对象
	Page{
		int index;
		int size;
	}
	
================================================
public Employee getEmp(@Param("id") Integer id, String lastName);
	取值：id==>#{id/param1}		lastName==>#{param2}
	
public Employee getEmp(Integer id, @Param("e") Employee emp);
	取值：id==>#{param1}		lastNamt==>#{param2.lastName/e.lastName}
	
##特别注意：如果是Collection(List，Set)类型或者是数组，也会特殊处理。
			也是把传入的list或者数据封装在map中
				key：Collection(collection),如果是List还可以使用这个key(list)
					数组(array)
public Employee getEmpById(List<Integer> ids);
	取值：取出第一个id的值：#{list[0]}
	
====================结合源码：mybatis怎么处理参数==========================
总结：参数多时会封装map，为了不混乱，我们可以使用@Param来指定封装进使用的key
	#{key}就可以取出map中的值
	
=====================参数值的获取=============================================
#{}：可以获取map中的值或者pojo对象属性的值；
${}: 可以获取map中的值或者pojo对象属性的值；
	区别：
		#{}：是预编译的形式，将参数置到sql语句中，PreparedStatement；
		${}：取出的值直接拼装在sql语句中，会安全问题；
		大多情况下，我们去参数值都应该去使用#{}；
		
		原生jdbc不支持点位符的地方我们就可以使用${}进行取值
		比如分表、排序：按照年份分表拆分
			select * from ${year}_salary where ×××;
			select * from tbl_employee order by ${f_name} ${order};

#{}：更丰富的用法：
	规定参数的一些细则：
	javaType、jdbcType、mode(存储过程)、numericScale
	resultMap、typeHandler、jdbcTypeName、expression(未来准备支持的功能)
	jdbcType通常需要在特定的条件下被配置
		在我们数据为null的进修，有些数据库可能不能识别mybatis对null的默认处理，比如Oracle(报错)
		由于全局配置中，jdbcTypeForNull=OTHER   oracle不支持
		1.#{email,jdbcType=NULL};
		2.jdbcTypeForNull=NULL
