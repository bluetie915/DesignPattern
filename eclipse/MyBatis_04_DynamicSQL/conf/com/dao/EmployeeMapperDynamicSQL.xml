<?xml version="1.0" encoding="UTF-8" ?> 
<!DOCTYPE mapper  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"  
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.dao.EmployeeMapperDynamicSQL">
	<!-- 
		if：判断
		choose(when, otherwise)：分支选择，即带了break的switch-case
			如果带了id就用id查，带了lastName就用lastName查，只会进入其中的一个
		trim(where(封装查询条件), set(封装修改条件))：字符串截取
		foreach
	 -->
	 
	<!-- 查询员工，要求携带了哪个字段查询条件就带上这个字段的值 -->
	<!-- public List<Employee> getEmpsByConditionIf(Employee employee); -->
	<select id="getEmpsByConditionIf" resultType="employee">
		select * from tbl_employee
		<!-- 
			test:判断表达式（OGNL）
			OGNL参照官方文档
			从参数中取值进行判断
		 -->
		<where>
			<if test="id != null">
				id = #{id}
			</if>
			<if test="lastName != null and lastName != ''">
				and last_name like #{lastName}
			</if>
			<if test="email != null and email.trim() != ''">
				and email = #{email} 
			</if>
			<!-- OGNL会进行字符串与数字的转换判断 -->
			<if test="gender == 0 or gender == 1">
			 	and gender = #{gender}
			</if>
		</where>
	</select>
	
	<!-- public List<Employee> getEmpsByConditionTrim(Employee employee); -->
	<select id="getEmpsByConditionTrim" resultType="employee">
		select * from tbl_employee
		<!-- 
		后面多出的and或者or where标签不能解决
			prefix=""：前缀，trim标签体中是整个字符串拼串后的结果。 
						prefix给拼串后的整个字符串加一个前缀
			prefixOverrides=""：
						前缀覆盖，去掉整个字符串前面多余的字符串
			suffix=""： suffix给拼串后的整个字符串加一个后缀
			suffixOverrides=""
						后缀覆盖，去掉整个字符串后面多余的字符
		 -->
		 <!-- 自定义字符串的截取规则 -->
		<trim prefix="where" suffixOverrides="and">
			<if test="id != null">
				id = #{id} and
			</if>
			<if test="lastName != null and lastName != ''">
				last_name like #{lastName} and 
			</if>
			<if test="email != null and email.trim() != ''">
				email = #{email} and 
			</if>
			<!-- OGNL会进行字符串与数字的转换判断 -->
			<if test="gender == 0 or gender == 1">
			 	gender = #{gender} 
			</if>
		</trim>
	</select>
	
	<!-- 	public List<Employee> getEmpsByConditionChoose(Employee employee) -->
	<select id="getEmpsByConditionChoose" resultType="employee">
		select * from tbl_employee
		<where>
			<!-- 如果带了id就用id查，带了lastName就用lastName查，只会进入其中的一个 -->
			<choose>
				<when test="id != null">
					id = #{id}
				</when>
				<when test="lastName != null">
					last_name like #{lastName}
				</when>
				<when test="email != null">
					email = #{email}
				</when>
				<otherwise>
					gender = 0
				</otherwise>
			</choose>
		</where>
	</select>
	
	
	<!-- public void updateEmp(Employee employee); -->
	<update id="updateEmp">
		<!-- 使用set版本 -->
		<!-- update tbl_employee
		<set>
			<if test="lastName != null">
				last_name=#{lastName},
			</if>
			<if test="email != null">
				email=#{email},
			</if>
			<if test="gender != null">
				gender=#{gender}
			</if>
		</set> 
		where id=#{id} -->
		
		<!-- 使用trim版本 -->
		update tbl_employee
		<trim prefix="set" suffixOverrides=",">
			<if test="lastName != null">
				last_name=#{lastName},
			</if>
			<if test="email != null">
				email=#{email},
			</if>
			<if test="gender != null">
				gender=#{gender}
			</if>
		</trim>
		where id=#{id}
	</update>
	
	
	<!-- public List<Employee> getEmpsByConditionForeach(List<Integer> ids); -->
	<select id="getEmpsByConditionForeach" resultType="employee">
		select * from tbl_employee 
		<!-- 
			collection:指定要遍历的集合
				list类型的参数会特殊处理封装在map中，map的key就叫list
			item：将当前遍历出来的元素赋值给指定的变量
			separator：每个元素之间的分隔符
			open：遍历出所有结果拼接一个开始的字符
			close：遍历出所有结果拼接一个结束的字符
			index：索引。遍历list的时候index就是索引，item就是当前的值
						遍历map的时候index表示的就是map的key，item就是map的值
						
			#{变量名}就能取出变量的值也就是当前遍历出的元素
		 -->
		<foreach collection="ids" item="item" separator=","
			open="where id in(" close=")">
			#{item}
		</foreach>
	</select>
	
	<!-- 批量保存 -->
	<!-- public void addEmps(@Param("employees")List<Employee> employees); -->
	<!-- 一条语句拼接多个数据 -->
	<!-- <insert id="addEmps">
		insert into tbl_employee(last_name,email,gender,d_id) values
		<foreach collection="employees" item="employee" separator=",">
			(#{employee.lastName},#{employee.email},#{employee.gender},#{employee.dept.id})
		</foreach>
	</insert> -->
	<!-- 多条语句进行拼接，需要数据库连接属性allowMultiQueries=true -->
	<!-- 不仅可以用来批量保存，也可以是增删改查交叉 -->
	<insert id="addEmps">
		<foreach collection="employees" item="employee" separator=";">
			insert into tbl_employee(last_name,email,gender,d_id) values
			(#{employee.lastName},#{employee.email},#{employee.gender},#{employee.dept.id})
		</foreach>
	</insert>
	
	<!-- 
		Oracle数据库不支持批量保存
		Oracle不支持values(),(),()
		Oracle支持的方式：
		1.多个sql放在begin-end里面
		2.利用中间表
	 -->
	 <!-- oracle第一种批量方式 -->
	<!-- <insert id="addEmps" databaseId="oracle">
		<foreach collection="employees" item="emp" open="begin" close="end;">
			insert into employees(employee_id,last_name,email)
				values(employee.seq.nextval,#{emp.lastName},#{emp.email});
		</foreach>
	</insert> -->
	<!-- oracle第二种批量方式 -->
	<!-- <insert id="addEmps" databaseId="oracle">
			insert into employees(employee_id,last_name,email)
				select employees_seq.nextval,lastName,email from(
					<foreach collection="emps" item="emp" separator="union">
						select #{emp.lastName} lastName,#{emp.email} email from dual
					</foreach>
				)
	</insert> -->
	
	
	<!-- 
		两个内置参数：
			不只是方法传递过来的参数可以用来判断，取值。。。
			mybatis默认还有两个内置参数：
			_parameter:代表整个参数
				单个参数：_parameter就是这个参数
				多个参数：参数会被封装为一个map：_parameter就是代表这个map
			_databaseId:如果配置了databaseIdProvider标签，
				_databaseId就是代表当前数据库的别名oracle
	 -->
	 <!-- public List<Employee> getEmpsTestInnerParameter(Employee employee); -->
	  <select id="getEmpsTestInnerParameter" resultType="employee">
	  		<!-- bind：可以将OGNL表达式的值绑定到一个变量中，方便后来引用这个变量的值 -->
	  		<bind name="_lastName" value="'_'+lastName+'%'"/>
	  		<if test="_databaseId=='mysql'">
		  		select * from tbl_employee
		  		<if test="_parameter != null">
		  			where last_name like #{_lastName}
		  		</if>
	  		</if>
			<if test="_databaseId=='sqlserver'">
				select * from tbl_employee
				<if test="_parameter != null">
					where last_name like #{_parametere.lastName}				
				</if>
			</if>		  
	  </select>
	  
	  <!-- 
	  	抽取可重用的sql片段，方便后面引用
	  	其中也可以使用if判断
	  	1、经常半要查询的列名，或者插入用的列名抽取出来方便引用
	  	2、include来引用已经抽取的sql
	  	3、include还可以自定义一些property，sql标签内部就能使用自定义的属性
	  		include-property取值的正确方式${prop}
	  		#{不能使用这种方式}
	   -->
	  <sql id="insertColumn">
	  	<if test="_databaseId == 'mysql'">
		  	id,last_name,email
	  	</if>
	  	<if test="_databaseId == 'sqlserver'">
	  		if,email,gender
	  	</if>
	  </sql>
	  <insert id="">
	  	insert into tbl_employee(
	  		<include refid="insertColumn"></include>
	  	) values ....
	  </insert>
</mapper>