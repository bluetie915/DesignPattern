<?xml version="1.0" encoding="UTF-8" ?> 
<!DOCTYPE mapper  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"  
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.dao.DepartmentMapper">
	
	<cache-ref namespace="com.dao.EmployeeMapper"/>
	
	<select id="getDeptById" resultType="com.bean.Department"> 
		select id,dept_name departmentName from tbl_dept where id = #{id}
	</select>
	
	
	
	<!-- 
		collection嵌套结果集的方式，定义关联的集合类型元素的封装规则
	 -->
	<!-- did dept_name || eid last_name email gender -->
	<resultMap type="com.bean.Department" id="MyDept">
		<id column="did" property="id"/>
		<result column="dept_name" property="departmentName"/>
		<!-- 
			collection定义关联的集合类型的属性的封装规则
			ofType:指定集合里面元素的类型	
		 -->
		<collection property="emps" ofType="employee">
			<!-- 定义这个 集合元素的封装规则 -->
			<id column="eid" property="id"/>
			<result column="last_name" property="lastName"/>
			<result column="email" property="email"/>
			<result column="gender" property="gender"/>
		</collection>
	</resultMap>
	
	<!-- public Department getDepByIdPlus(Integer id); -->
	<select id="getDepByIdPlus" resultMap="MyDept">
		select d.id did,d.dept_name dept_name,
			e.id eid,e.last_name last_name,e.email email,e.gender gender
		from tbl_dept d LEFT JOIN tbl_employee e
		on d.id = e.d_id
		where d.id = #{id}
	</select>
	
	
	<!-- 实现查询多个 -->
	<resultMap type="com.bean.Department" id="MyDeptStep">
		<id column="id" property="id"/>
		<result column="dept_name" property="departmentName"/>
		<collection property="emps"
			select="com.dao.EmployeeMapperPlus.getEmpsByDeptId"
			column="{deptId=id}" fetchType="lazy">
		</collection>
	</resultMap>
	<!-- public Department getDeptByIdStep(Integer id); -->
	<select id="getDeptByIdStep" resultMap="MyDeptStep">
		select id,dept_name departmentName from tbl_dept where id = #{id}
	</select>
	<!-- 
		扩展：多列的值传递过去
		将多列的值封装map传递：
		column="{key1=column1,key2=column2}"
		fetchType="lazy"表示使用延迟加载
			- lazy：延迟
			- eager：立即
	 -->
</mapper>