<?xml version="1.0" encoding="UTF-8" ?> 
<!DOCTYPE mapper  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"  
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!-- 
	napespace:名称空间
	id:唯一标识
	resultType：返回值类型
 -->
<mapper namespace="com.dao.EmployeeMapper">

	<!-- 
			public Map<Integer, Employee> getEmpByLastNameLikeReturnMap(String lastName);
	 -->
	<select id="getEmpByLastNameLikeReturnMap" resultType="employee">
		select * from tbl_employee where last_name like #{lastName}
	</select>


	<!-- 
			public Map<String, Object> getEmpByIdReturnMap(Integer id);
	 -->
	<select id="getEmpByIdReturnMap" resultType="map">
		select * from tbl_employee where id = #{id}
	</select>


	<!-- 
			public List<Employee> getEmpsByLastNameLike();
	 		resultType:如果返回的是一个集合，就写集合中元素的类型
	 -->
	 <select id="getEmpsByLastNameLike" resultType="com.bean.Employee">
	 	select * from tbl_employee where last_name like #{lastName}
	 </select>
	 
	<!-- 	
		public Employee getEmpByMap(Map<String, Object> map);
	 -->
	<select id="getEmpByMap" resultType="com.bean.Employee">
		select * from ${tableName} where id = #{id} and last_name = #{lastName};
	</select>



	<!-- 	
		public Employee getEmpByIdAndName(@Param("id") Integer id, @Param("lastName") String lastName);
	 -->
	<select id="getEmpByIdAndName" resultType="com.bean.Employee">
		select * from tbl_employee where id = #{id} and last_name = #{lastName};
	</select>


	<select id="getEmpById" resultType="employee" databaseId="mysql"> 
		<!-- select id,last_name lastName,email,gender from tbl_employee where id = #{id} -->  
		select * from tbl_employee where id = #{id}
	</select>
	<!-- <select id="getEmpById" resultType="employee" databaseId="mysql">  
		select id,last_name lastName,email,gender from tbl_employee where id = #{id}  
		select uid id,uname lastName,pwd email,sex gender from t_user where uid = #{id}
	</select> -->
	
	
	 
	 
	 <!-- 
	 	Oracel知识点介绍：
	 	oracle没有主键自增，但是有序列，所以插入时要先得到序列的下一个
	 		然后封装给此javabean的某一个属性，比如id，再进行插入操作
	 		就如下面的order="before"，意思就是该语句在插入之前执行
	 		
	 		如果用order="after"，意思就是该语句在插入之后执行
	 		那就要在插入时的sql里使用序列的下一个，在插入之后
	 		然后封装给此javabean的某一个属性
	  
	  		最多使用的还是BEFORE
	  -->
	<!-- <insert id="addEmp">
		<selectKey keyProperty="id" order="BEFORE" resultType="Integer">
			select EMPLOYEE_SEQ.nextval from dual
		</selectKey>
		insert into employee(id,lastName,email) values (#{id},#{lastName},#{email})
	</insert>
	<insert id="addEmp">
		<selectKey keyProperty="id" order="AFTER" resultType="Integer">
			select EMPLOYEE_SEQ.currval from dual
		</selectKey>
		insert into employees(id,lastName,email) values (EMPLOYEE_SEQ.nextval,#{lastName},#{email})
	</insert> -->
	
	
	
	<!-- 
		public void addEmp(Employee employee);
		parameterType:参数类型，可以省略
		获取自增主键值：
			mysql支持自增主键，自增主键值的获取，mybatis也是利用statement.getGenreatedKeys();
			useGeneratedKeys="true";使用自增主键获取主键获取主键值策略
			keyProperty:指定对应的主键属性，也就是mybatis获取到主键值以后，将这个值封装给JavaBean的哪个属性
	 -->
	<insert id="addEmp" parameterType="com.bean.Employee" useGeneratedKeys="true" keyProperty="id">
		insert into tbl_employee(last_name,email,gender) values (#{lastName},#{email},#{gender})
	</insert>
	
	<!-- public void updateEmp(Employee employee); -->
	<update id="updateEmp">
		update tbl_employee set last_name=#{lastName},email=#{email},gender=#{gender}
			where id=#{id}
	</update>
	
	<!-- public void deleteEmpById(Integer id); -->
	<delete id="deleteEmpById">
		delete from tbl_employee where id=#{id}
	</delete>
</mapper>
